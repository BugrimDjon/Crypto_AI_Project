# -*- coding: utf-8 -*-
# –£–º–µ–Ω—å—à–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è CPU –ø–æ—Ç–æ–∫–æ–≤
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from tensorflow.keras.optimizers import Adam
import tensorflow as tf
tf.config.threading.set_intra_op_parallelism_threads(1)
tf.config.threading.set_inter_op_parallelism_threads(1)
import threading
import matplotlib.pyplot as plt
import joblib
from tensorflow.keras.models import load_model, Sequential
from Reports.reports import Reports
from datetime import datetime, timedelta

import time
from datetime import datetime
import os
import requests
from enums.AfterBefore import AfterBefore
from enums.coins import Coins
from enums.timeframes import Timeframe
from ssl import OP_ENABLE_MIDDLEBOX_COMPAT
from database.db import Database
from services import okx_candles
from config.SettingsCoins import SettingsCoins
from services.service import Servise
from AI.AIModelService import AIModelService
from datetime import datetime
import tzlocal



def clear_console():
    os.system("cls" if os.name == "nt" else "clear")

clear_console()
# –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–¥
db = Database()
db.connect()
# –ø–µ—Ä–µ–¥–∞—á–∞ –æ—Ç–∫—Ä—ã–±–æ–π –±–¥ –≤ –º–Ω—Ç–æ–¥
run_servis = Servise(db)







# **************************–ù–ê–ß–ê–õ–û –ì–û–¢–û–í–û

def agregate_table(table_name: Coins):
    print("********************* –†–∞—Å—á–µ—Ç 5 –º–∏–Ω—É—Ç–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤************")
    len = run_servis.recalc_timeframe(table_name, Timeframe._1min, Timeframe._5min)
    print("********************* –†–∞—Å—á–µ—Ç 10 –º–∏–Ω—É—Ç–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤************")
    len = run_servis.recalc_timeframe(table_name, Timeframe._5min, Timeframe._10min)
    print("********************* –†–∞—Å—á–µ—Ç 15 –º–∏–Ω—É—Ç–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤************")
    len = run_servis.recalc_timeframe(table_name, Timeframe._5min, Timeframe._15min)
    print("********************* –†–∞—Å—á–µ—Ç 30 –º–∏–Ω—É—Ç–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤************")
    len = run_servis.recalc_timeframe(table_name, Timeframe._15min, Timeframe._30min)
    print("********************* –†–∞—Å—á–µ—Ç 1 —á–∞—Å–æ–≤—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤************")
    len = run_servis.recalc_timeframe(table_name, Timeframe._30min, Timeframe._1hour)
    print("********************* –†–∞—Å—á–µ—Ç 4 —á–∞—Å–æ–≤—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤************")
    len = run_servis.recalc_timeframe(table_name, Timeframe._1hour, Timeframe._4hour)
    print("********************* –†–∞—Å—á–µ—Ç  1 –¥–Ω–µ–≤–Ω—ã—Ö  —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤************")
    len = run_servis.recalc_timeframe(table_name, Timeframe._4hour, Timeframe._1day)
    print("********************* –†–∞—Å—á–µ—Ç –Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤************")
    len = run_servis.recalc_timeframe(table_name, Timeframe._1day, Timeframe._1week)




while 1:
    menu = f"""
            *******************
            –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
            –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:
            1 - –£–∑–Ω–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑
            2 - –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å
            3 - –û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É
            4 - –ù–∞—á–∞—Ç—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ø–æ –æ–±—É—á–µ–Ω–∏—é —Å —Ä–∞–∑–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
            8 - –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º –≤ –ë–î
            9 - –ù–∞—á–∞—Ç—å –≤—ã—á–∏—Ç–∫—É –Ω–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∞–≥—Ä–µ–≥–∞—Ü–∏—é –∏ —Ä–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            0 - –í—ã—Ö–æ–¥
            *******************
"""

    

    try:
        button = int(input(menu).strip())
    except ValueError:
        print("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        continue

    # button =4
    match button:
        case 1:
            # run_servis.load_model_and_scalers()
            # price_pred = run_servis.predict_price(Coins.FET, Timeframe._30min)
            # print(f"üìà –ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è: {price_pred:.6f}")
            # for i in range(100):
            # i=1
            # star_time=1749241800000+i*30*1000*60    
            # run_servis.make_forecast(str(star_time))
            run_servis.make_forecast_on_working_models()

        case 2:
            confirm = input("‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ (y/n): ").strip().lower()
            if confirm == "y":
                model, fs, ts = run_servis.train_model(
                    Coins.FET, Timeframe._30min, window_size=100
                )
                print("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
            else:
                print("‚ùå –û–±—É—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            # model, feature_scaler, target_scaler = run_servis.for_ai(Coins.FET, Timeframe._30min)
        case 3:
            print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã...")
            time_for_update = run_servis.data_for_update(Coins.FET)
            err = run_servis.check_sequence_timeframes(
                Coins.FET,
                Timeframe._1min,
                int(time_for_update["time_in_database"]),
                int(time_for_update["current_time_on_the_exchange"]),
                True,
            )
            agregate_table(Coins.FET)
            run_servis.calculation_of_indicators(
                Coins.FET
            )  # —Ä–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ –≤—Å–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
        case 4:
            # run_servis.ai_expirement_predictions()
            run_servis.ai_expirement()
        case 8:
            run_servis.repord_db(Coins.FET)
        case 9:
            run_servis.first_load_candles(Coins.FET, (365 * 1.5 * 24))  # –≥–æ—Ç–æ–≤–æ
            err = run_servis.check_sequence_timeframes(
                Coins.FET, Timeframe._1min, 0, 1748943960000, True
            )
            agregate_table(Coins.FET)
            run_servis.calculation_of_indicators(
                Coins.FET
            )  # —Ä–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ –≤—Å–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω—ã, –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã.")

        case 0:
            print("üëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
            break

        case 11:
            import traceback

            def background_task():
                global ai_training_in_progress
                if ai_training_in_progress:
                    print("‚è∏Ô∏è –û–±—É—á–µ–Ω–∏–µ —É–∂–µ –∏–¥—ë—Ç, –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω.")
                    return
                try:
                    ai_training_in_progress = True
                    print("üß† –§–æ–Ω–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –∑–∞–ø—É—â–µ–Ω–æ...")
                    run_servis.ai_expirement()
                    print("‚úÖ –§–æ–Ω–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–µ –æ–±—É—á–µ–Ω–∏—è: {e}")
                    traceback.print_exc()
                finally:
                    ai_training_in_progress = False


            def wait_until_next_interval(interval_minutes=5):
                now = datetime.now()
                next_minute = (now.minute // interval_minutes + 1) * interval_minutes
                next_time = now.replace(minute=0, second=0, microsecond=0) + timedelta(minutes=next_minute)
                wait_seconds = (next_time - now).total_seconds()
                time.sleep(wait_seconds)


            ai_training_in_progress = False

            try:
                while True:
                    print(f"\nüîÅ –ó–∞–ø—É—Å–∫ –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –≤: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

                    try:
                        print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
                        time_for_update = run_servis.data_for_update(Coins.FET)
                        err = run_servis.check_sequence_timeframes(
                            Coins.FET,
                            Timeframe._1min,
                            int(time_for_update["time_in_database"]),
                            int(time_for_update["current_time_on_the_exchange"]),
                            True,
                        )
                        print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

                        print("üìä –ê–≥—Ä–µ–≥–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü...")
                        agregate_table(Coins.FET)
                        print("‚úÖ –ê–≥—Ä–µ–≥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

                        print("üìà –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...")
                        run_servis.calculation_of_indicators(Coins.FET)
                        print("‚úÖ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã.")

                        print("ü§ñ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π...")
                        run_servis.make_forecast_on_working_models()
                        print("‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω.")

                        print("üöÄ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π (–∫–ª–∞–≤–∏—à–∞ 4)...")
                        thread = threading.Thread(target=background_task, daemon=True)
                        thread.start()

                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
                        traceback.print_exc()

                    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞...")
                    wait_until_next_interval(5)

            except KeyboardInterrupt:
                print("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
            except Exception as e:
                print(f"‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                traceback.print_exc()



        case _:
            print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            break



# **************************–ö–û–ù–ï–¶ –ì–û–¢–û–í–û

# –∑–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–¥
db.close()



#  run_servis.first_load_candles(Coins.FET) # –≥–æ—Ç–æ–≤–æ
# err=run_servis.check_sequence_timeframes(Coins.FET.value,Timeframe._5min,1717171920000,1748729760000,True)


# print(datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")[:-3])  # –æ–±—Ä–µ–∑–∞–µ–º –¥–æ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
# len=1
# while len!=0:
# len=run_servis.recalc_timeframe(Coins.FET, Timeframe._1day, Timeframe._1week)

# run_servis.calculation_of_indicators(Coins.FET) #—Ä–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ –≤—Å–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º

# *********************************************************************************************
# *********************************************************************************************
# *********************************************************************************************

# time_for_update = run_servis.data_for_update(Coins.FET)

# print(
#     "********************* –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∏–Ω—É—Ç–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏************")
# err = run_servis.check_sequence_timeframes(
#     Coins.FET.value, Timeframe._1min,
#     int(time_for_update["time_in_database"]),
#     int(time_for_update["current_time_on_the_exchange"]),
#     True
# )


# print(
#     "********************* –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤************")
# run_servis.calculation_of_indicators(Coins.FET) #—Ä–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ –≤—Å–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
# # *****************************************************************************************
# # *****************************************************************************************
# # *****************************************************************************************


# # model, feature_scaler, target_scaler = run_servis.for_ai(Coins.FET, Timeframe._1hour)

# run_servis.load_model_and_scalers()
# result = run_servis.out_ai(Coins.FET, Timeframe._1hour)
# print("–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è:", result)


# print(datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")[:-3])  # –æ–±—Ä–µ–∑–∞–µ–º –¥–æ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥

